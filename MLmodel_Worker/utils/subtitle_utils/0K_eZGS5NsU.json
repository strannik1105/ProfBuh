{
    "0": [
        "00:00:00,000 --> 00:00:02,000",
        "Привет всем, добро пожаловать обратно, и давайте писать"
    ],
    "1": [
        "00:00:02,000 --> 00:00:03,440",
        "немного более классного кода сегодня."
    ],
    "2": [
        "00:00:03,440 --> 00:00:05,240",
        "Так что сегодня я хочу рассказать вам все, что"
    ],
    "3": [
        "00:00:05,240 --> 00:00:08,480",
        "вам нужно знать о Python для кодирования интервью."
    ],
    "4": [
        "00:00:08,480 --> 00:00:10,880",
        "Если вы новичок, немного о моем объяснении."
    ],
    "5": [
        "00:00:10,880 --> 00:00:13,160",
        "Я начал канал несколько лет назад, в начале"
    ],
    "6": [
        "00:00:13,160 --> 00:00:14,160",
        "пандемии."
    ],
    "7": [
        "00:00:14,160 --> 00:00:16,880",
        "Я был безплатным, и я сделал решения для кодирования"
    ],
    "8": [
        "00:00:16,880 --> 00:00:18,400",
        "интервью в Python."
    ],
    "9": [
        "00:00:18,400 --> 00:00:20,680",
        "И немного более чем год после этого я в итоге получил"
    ],
    "10": [
        "00:00:20,680 --> 00:00:23,320",
        "работу в Google, и я практически использовал Python"
    ],
    "11": [
        "00:00:23,320 --> 00:00:25,520",
        "во всех моих интервью, и я думаю, что это было"
    ],
    "12": [
        "00:00:25,520 --> 00:00:27,480",
        "действительно полезно, потому что Python так"
    ],
    "13": [
        "00:00:27,480 --> 00:00:30,800",
        "легко, чем в большинстве языков, и это супер конкретно."
    ],
    "14": [
        "00:00:30,800 --> 00:00:33,320",
        "Я вообще никогда не писал линию кода Python"
    ],
    "15": [
        "00:00:33,320 --> 00:00:35,040",
        "в каких-либо работах или интервью, которые я"
    ],
    "16": [
        "00:00:35,040 --> 00:00:36,040",
        "никогда делал."
    ],
    "17": [
        "00:00:36,040 --> 00:00:38,360",
        "Я буквально учил Python только для кодирования"
    ],
    "18": [
        "00:00:38,360 --> 00:00:40,640",
        "интервью, и это было действительно важно."
    ],
    "19": [
        "00:00:40,640 --> 00:00:42,520",
        "Если вы уже знакомы с Python, я надеюсь, что вы"
    ],
    "20": [
        "00:00:42,520 --> 00:00:44,280",
        "узнали некоторые советы и трюки из этого"
    ],
    "21": [
        "00:00:44,280 --> 00:00:46,320",
        "видео, и если вы используете другие языки, как Java"
    ],
    "22": [
        "00:00:46,320 --> 00:00:48,520",
        "или C++, я надеюсь, что в конце этого видео вы"
    ],
    "23": [
        "00:00:48,520 --> 00:00:50,280",
        "увидите плюсы и затем присоединитесь к"
    ],
    "24": [
        "00:00:50,280 --> 00:00:51,520",
        "церкви Python."
    ],
    "25": [
        "00:00:51,520 --> 00:00:53,240",
        "Я думаю, что вы сможете улучшить это быстрее, чем"
    ],
    "26": [
        "00:00:53,240 --> 00:00:55,360",
        "вы ожидали, особенно если вы уже знакомы"
    ],
    "27": [
        "00:00:55,360 --> 00:00:56,360",
        "с программой."
    ],
    "28": [
        "00:00:56,360 --> 00:00:57,800",
        "И, кстати, если вы изучаете кодирование"
    ],
    "29": [
        "00:00:57,800 --> 00:01:00,040",
        "интервью, посмотрите на neatcode.io, это сайт, который"
    ],
    "30": [
        "00:01:00,040 --> 00:01:01,320",
        "я создал, и он имеет много бесплатных"
    ],
    "31": [
        "00:01:01,320 --> 00:01:02,920",
        "ресурсов, чтобы помочь вам подготовиться."
    ],
    "32": [
        "00:01:02,920 --> 00:01:04,800",
        "И я также начал делать курсы."
    ],
    "33": [
        "00:01:04,800 --> 00:01:06,160",
        "Я только что закончил курс на предаваемые"
    ],
    "34": [
        "00:01:06,160 --> 00:01:08,040",
        "алгоритмы, и я буду начинать курс на"
    ],
    "35": [
        "00:01:08,040 --> 00:01:09,840",
        "системное дизайн для начинающих, так что"
    ],
    "36": [
        "00:01:09,840 --> 00:01:11,600",
        "вы не хотите пропустить это."
    ],
    "37": [
        "00:01:11,600 --> 00:01:12,880",
        "Окей, давайте начнем."
    ],
    "38": [
        "00:01:12,880 --> 00:01:15,200",
        "Первое, что вы должны знать о Python, это"
    ],
    "39": [
        "00:01:15,200 --> 00:01:17,600",
        "то, что это динамично-тайповая язык."
    ],
    "40": [
        "00:01:17,600 --> 00:01:19,240",
        "Так что, когда мы заявляем вариант, например,"
    ],
    "41": [
        "00:01:19,240 --> 00:01:20,960",
        "n, и ставим его на 0, мы не должны"
    ],
    "42": [
        "00:01:20,960 --> 00:01:22,720",
        "заявлять тип вообще."
    ],
    "43": [
        "00:01:22,720 --> 00:01:24,000",
        "Так что теперь, если мы запустим код и"
    ],
    "44": [
        "00:01:24,000 --> 00:01:26,440",
        "запишем n, вы можете увидеть, что это равен 0."
    ],
    "45": [
        "00:01:26,440 --> 00:01:29,040",
        "Но типы определяются в время работы, так что"
    ],
    "46": [
        "00:01:29,040 --> 00:01:31,960",
        "мы можем переносить n на стринг, и это"
    ],
    "47": [
        "00:01:31,960 --> 00:01:34,680",
        "идеально, потому что n не имеет типа."
    ],
    "48": [
        "00:01:34,680 --> 00:01:36,920",
        "Тип определяется в время работы."
    ],
    "49": [
        "00:01:36,920 --> 00:01:38,720",
        "Так что теперь мы можем снова запустить код,"
    ],
    "50": [
        "00:01:38,720 --> 00:01:40,640",
        "и мы можем увидеть, что n был оригинально 0,"
    ],
    "51": [
        "00:01:40,640 --> 00:01:42,840",
        "и потом он изменился на стринг ABC."
    ],
    "52": [
        "00:01:42,840 --> 00:01:44,640",
        "Мы также можем делать множество"
    ],
    "53": [
        "00:01:44,640 --> 00:01:47,040",
        "заявлений, но это немного другое, чем"
    ],
    "54": [
        "00:01:47,040 --> 00:01:48,040",
        "в большинстве языков."
    ],
    "55": [
        "00:01:48,040 --> 00:01:49,480",
        "Если у нас есть два варианта, мы"
    ],
    "56": [
        "00:01:49,480 --> 00:01:52,280",
        "ставим их оба на левой стороне, и"
    ],
    "57": [
        "00:01:52,280 --> 00:01:54,400",
        "потом мы имеем нашу равную, и потом"
    ],
    "58": [
        "00:01:54,400 --> 00:01:57,000",
        "мы ставим два значения на левой стороне."
    ],
    "59": [
        "00:01:57,000 --> 00:01:59,080",
        "Непросто, чтобы иметь множество типов в"
    ],
    "60": [
        "00:01:59,080 --> 00:02:00,920",
        "одной линии."
    ],
    "61": [
        "00:02:00,920 --> 00:02:02,240",
        "Инкрементация немного другая."
    ],
    "62": [
        "00:02:02,240 --> 00:02:03,640",
        "Конечно, мы можем инкрементировать в"
    ],
    "63": [
        "00:02:03,640 --> 00:02:05,440",
        "очень простой способ, как это."
    ],
    "64": [
        "00:02:05,440 --> 00:02:06,960",
        "n равен n плюс 1."
    ],
    "65": [
        "00:02:06,960 --> 00:02:08,960",
        "Мы также можем делать короткую руку n плюс"
    ],
    "66": [
        "00:02:08,960 --> 00:02:10,840",
        "равен 1, как и в большинстве языков, но"
    ],
    "67": [
        "00:02:10,840 --> 00:02:12,880",
        "мы не можем делать плюс плюс."
    ],
    "68": [
        "00:02:12,880 --> 00:02:14,080",
        "Вы можете увидеть, что это даже дает нам"
    ],
    "69": [
        "00:02:14,080 --> 00:02:15,080",
        "ошибку в синтезе."
    ],
    "70": [
        "00:02:15,080 --> 00:02:16,600",
        "Мы не можем делать плюс плюс."
    ],
    "71": [
        "00:02:16,600 --> 00:02:18,600",
        "Это связано с интерпретером Python,"
    ],
    "72": [
        "00:02:18,600 --> 00:02:19,600",
        "но это не очень важно."
    ],
    "73": [
        "00:02:19,600 --> 00:02:20,600",
        "Я имею в виду, что это один из"
    ],
    "74": [
        "00:02:20,600 --> 00:02:22,280",
        "случаев, когда Python немного менее"
    ],
    "75": [
        "00:02:22,280 --> 00:02:23,280",
        "конкретен."
    ],
    "76": [
        "00:02:23,280 --> 00:02:25,280",
        "Python также имеет ноль, но это называется"
    ],
    "77": [
        "00:02:25,280 --> 00:02:27,320",
        "ноль в Python, что, в основном, является"
    ],
    "78": [
        "00:02:27,320 --> 00:02:28,800",
        "отсутствием цифры."
    ],
    "79": [
        "00:02:28,800 --> 00:02:30,200",
        "В отличие от большинства языков, мы можем"
    ],
    "80": [
        "00:02:30,200 --> 00:02:32,640",
        "иметь цифру, которая вначале является цифрой,"
    ],
    "81": [
        "00:02:32,640 --> 00:02:34,560",
        "или она должна содержать цифру, как 4,"
    ],
    "82": [
        "00:02:34,560 --> 00:02:36,240",
        "но потом мы можем ее переносить в ноль,"
    ],
    "83": [
        "00:02:36,240 --> 00:02:38,080",
        "что означает ноль, и потом мы видим, что"
    ],
    "84": [
        "00:02:38,080 --> 00:02:39,520",
        "она равна ноли."
    ],
    "85": [
        "00:02:39,520 --> 00:02:40,640",
        "If-представления довольно"
    ],
    "86": [
        "00:02:40,640 --> 00:02:42,680",
        "простые в Python, хотя бы"
    ],
    "87": [
        "00:02:42,680 --> 00:02:44,840",
        "концептуально, но синтетически."
    ],
    "88": [
        "00:02:44,840 --> 00:02:46,640",
        "Есть несколько различий, в том числе,"
    ],
    "89": [
        "00:02:46,640 --> 00:02:48,480",
        "что нам не нужны парентезы, поэтому если"
    ],
    "90": [
        "00:02:48,480 --> 00:02:50,760",
        "у нас есть If-представление, как это, мы"
    ],
    "91": [
        "00:02:50,760 --> 00:02:53,560",
        "не нужны вставить кондиционер в парентезы,"
    ],
    "92": [
        "00:02:53,560 --> 00:02:55,040",
        "и мы не нужны крылья, чтобы"
    ],
    "93": [
        "00:02:55,040 --> 00:02:56,640",
        "представлять, что это блок, который"
    ],
    "94": [
        "00:02:56,640 --> 00:02:58,840",
        "соответствует этому кондиционеру."
    ],
    "95": [
        "00:02:58,840 --> 00:02:59,840",
        "Мы используем"
    ],
    "96": [
        "00:02:59,840 --> 00:03:01,480",
        "вкладку для этого, так что вы можете видеть,"
    ],
    "97": [
        "00:03:01,480 --> 00:03:02,480",
        "что у нас есть кнопка, которая"
    ],
    "98": [
        "00:03:02,480 --> 00:03:04,280",
        "означает, что этот код принадлежит"
    ],
    "99": [
        "00:03:04,280 --> 00:03:05,280",
        "этому предсказанию."
    ],
    "100": [
        "00:03:05,280 --> 00:03:06,280",
        "У нас есть колонна, который"
    ],
    "101": [
        "00:03:06,280 --> 00:03:07,560",
        "идет после кондиционера."
    ],
    "102": [
        "00:03:07,560 --> 00:03:09,360",
        "Else-if работает немного"
    ],
    "103": [
        "00:03:09,360 --> 00:03:10,360",
        "по-другому."
    ],
    "104": [
        "00:03:10,360 --> 00:03:11,360",
        "Мы не имеем обоих"
    ],
    "105": [
        "00:03:11,360 --> 00:03:12,560",
        "ключевых слов Else-if, мы даже"
    ],
    "106": [
        "00:03:12,560 --> 00:03:13,560",
        "сокращаем это."
    ],
    "107": [
        "00:03:13,560 --> 00:03:14,560",
        "Я не очень"
    ],
    "108": [
        "00:03:14,560 --> 00:03:15,760",
        "заботился о этом, но я предполагаю, что это"
    ],
    "109": [
        "00:03:15,760 --> 00:03:16,760",
        "просто связано с"
    ],
    "110": [
        "00:03:16,760 --> 00:03:18,560",
        "Python-интерпретером, потому что у нас уже"
    ],
    "111": [
        "00:03:18,560 --> 00:03:20,600",
        "есть два ключевых слова для If и Else,"
    ],
    "112": [
        "00:03:20,600 --> 00:03:22,000",
        "поэтому мы должны создать новый ключевый"
    ],
    "113": [
        "00:03:22,000 --> 00:03:23,600",
        "слово для Else-if, по крайней мере, это то,"
    ],
    "114": [
        "00:03:23,600 --> 00:03:24,600",
        "что я предполагаю."
    ],
    "115": [
        "00:03:24,600 --> 00:03:25,600",
        "Парентезы не"
    ],
    "116": [
        "00:03:25,600 --> 00:03:26,920",
        "нужны для кондиционеров в Python,"
    ],
    "117": [
        "00:03:26,920 --> 00:03:28,200",
        "они нужны, если у нас есть"
    ],
    "118": [
        "00:03:28,200 --> 00:03:30,000",
        "мульти-лайны кондиционеров."
    ],
    "119": [
        "00:03:30,000 --> 00:03:31,000",
        "И, кстати,"
    ],
    "120": [
        "00:03:31,000 --> 00:03:33,280",
        "Logic-and в большинстве языков является"
    ],
    "121": [
        "00:03:33,280 --> 00:03:34,280",
        "двумя-персиметровым"
    ],
    "122": [
        "00:03:34,280 --> 00:03:35,840",
        "характером, но в Python это просто"
    ],
    "123": [
        "00:03:35,840 --> 00:03:38,120",
        "ключевое слово and, or это просто"
    ],
    "124": [
        "00:03:38,120 --> 00:03:39,320",
        "ключевое слово or."
    ],
    "125": [
        "00:03:39,320 --> 00:03:40,320",
        "Так что не то, что это"
    ],
    "126": [
        "00:03:40,320 --> 00:03:41,320",
        "короче, но это просто делает вещи"
    ],
    "127": [
        "00:03:41,320 --> 00:03:42,480",
        "немного более читательными."
    ],
    "128": [
        "00:03:42,480 --> 00:03:43,480",
        "Например, если у нас есть"
    ],
    "129": [
        "00:03:43,480 --> 00:03:44,600",
        "If-представление, которое выглядит"
    ],
    "130": [
        "00:03:44,600 --> 00:03:46,800",
        "так, мы используем ключевое слово and,"
    ],
    "131": [
        "00:03:46,800 --> 00:03:48,200",
        "и мы используем ключевое слово or для"
    ],
    "132": [
        "00:03:48,200 --> 00:03:50,840",
        "значения Logic-and и Logic-or, и так как у нас"
    ],
    "133": [
        "00:03:50,840 --> 00:03:52,240",
        "есть мульти-лайн-кондиционер,"
    ],
    "134": [
        "00:03:52,240 --> 00:03:53,760",
        "как эти две линии, они часть"
    ],
    "135": [
        "00:03:53,760 --> 00:03:55,000",
        "кондиционера, мы должны"
    ],
    "136": [
        "00:03:55,000 --> 00:03:57,600",
        "поставить их внутри парентезов,"
    ],
    "137": [
        "00:03:57,600 --> 00:03:59,640",
        "иначе мы получим ошибку в синтезе."
    ],
    "138": [
        "00:03:59,640 --> 00:04:00,640",
        "Синтетически,"
    ],
    "139": [
        "00:04:00,640 --> 00:04:01,640",
        "while-лупы довольно похожи,"
    ],
    "140": [
        "00:04:01,640 --> 00:04:02,640",
        "например, у нас есть"
    ],
    "141": [
        "00:04:02,640 --> 00:04:04,160",
        "параметра n == 0, мы можем"
    ],
    "142": [
        "00:04:04,160 --> 00:04:05,400",
        "создать while-луп, где"
    ],
    "143": [
        "00:04:05,400 --> 00:04:06,400",
        "кондиционер не должен"
    ],
    "144": [
        "00:04:06,400 --> 00:04:08,080",
        "идти в парентезы, блок"
    ],
    "145": [
        "00:04:08,080 --> 00:04:10,080",
        "подсоединен к колонне, и"
    ],
    "146": [
        "00:04:10,080 --> 00:04:11,080",
        "код сам по себе"
    ],
    "147": [
        "00:04:11,080 --> 00:04:12,680",
        "включен с кнопкой, мы"
    ],
    "148": [
        "00:04:12,680 --> 00:04:14,680",
        "принимаем n, и, используя код,"
    ],
    "149": [
        "00:04:14,680 --> 00:04:16,680",
        "мы получаем 0-4."
    ],
    "150": [
        "00:04:16,680 --> 00:04:18,680",
        "4-лупы довольно похожи,"
    ],
    "151": [
        "00:04:18,680 --> 00:04:19,680",
        "так что если мы хотим делать"
    ],
    "152": [
        "00:04:19,680 --> 00:04:20,680",
        "точно то же самое, идти"
    ],
    "153": [
        "00:04:20,680 --> 00:04:22,680",
        "от 0 до 4, мы создаем"
    ],
    "154": [
        "00:04:22,680 --> 00:04:24,680",
        "4-луп, где наш вариант"
    ],
    "155": [
        "00:04:24,680 --> 00:04:26,680",
        "i будет идти в"
    ],
    "156": [
        "00:04:26,680 --> 00:04:28,680",
        "парентезе 5, это, в основном, означает,"
    ],
    "157": [
        "00:04:28,680 --> 00:04:30,680",
        "что он будет начать с 0,"
    ],
    "158": [
        "00:04:30,680 --> 00:04:32,680",
        "и продолжать, пока он достигнет"
    ],
    "159": [
        "00:04:32,680 --> 00:04:34,680",
        "5, и затем остановиться, и"
    ],
    "160": [
        "00:04:34,680 --> 00:04:36,680",
        "i будет имплицитно увеличен,"
    ],
    "161": [
        "00:04:36,680 --> 00:04:38,680",
        "так что мы не должны сказать, что этот луп"
    ],
    "162": [
        "00:04:38,680 --> 00:04:39,680",
        "будет увеличен, i будет"
    ],
    "163": [
        "00:04:39,680 --> 00:04:41,680",
        "увеличен на каждую итерацию"
    ],
    "164": [
        "00:04:41,680 --> 00:04:42,680",
        "по правилам."
    ],
    "165": [
        "00:04:42,680 --> 00:04:44,680",
        "И, используя код, вы увидите, что мы получаем"
    ],
    "166": [
        "00:04:44,680 --> 00:04:46,680",
        "почти то же самое, 0-4,"
    ],
    "167": [
        "00:04:46,680 --> 00:04:48,680",
        "так что 5 не включен"
    ],
    "168": [
        "00:04:48,680 --> 00:04:50,680",
        "в процессе выполнения лупы."
    ],
    "169": [
        "00:04:50,680 --> 00:04:52,680",
        "Чтобы лучше изображать 4-луп, давайте"
    ],
    "170": [
        "00:04:52,680 --> 00:04:54,680",
        "посмотрим на другой пример, где мы идем"
    ],
    "171": [
        "00:04:54,680 --> 00:04:55,680",
        "от 2 до 5."
    ],
    "172": [
        "00:04:55,680 --> 00:04:57,680",
        "В этом случае мы используем те же"
    ],
    "173": [
        "00:04:57,680 --> 00:04:59,680",
        "коди, для i в паренте, но"
    ],
    "174": [
        "00:04:59,680 --> 00:05:01,680",
        "мы вводим 2 варианта в паренте,"
    ],
    "175": [
        "00:05:01,680 --> 00:05:03,680",
        "мы начинаем с 2,"
    ],
    "176": [
        "00:05:03,680 --> 00:05:05,680",
        "и идем до 6,"
    ],
    "177": [
        "00:05:05,680 --> 00:05:07,680",
        "но не включая 6,"
    ],
    "178": [
        "00:05:07,680 --> 00:05:09,680",
        "так что теперь, когда мы запишем это,"
    ],
    "179": [
        "00:05:09,680 --> 00:05:11,680",
        "мы идем от 2 до"
    ],
    "180": [
        "00:05:11,680 --> 00:05:13,680",
        "5. И если вы хотите"
    ],
    "181": [
        "00:05:13,680 --> 00:05:15,680",
        "идти в обратном направлении, начиная с 5"
    ],
    "182": [
        "00:05:15,680 --> 00:05:17,680",
        "и идти до 2, то это будет"
    ],
    "183": [
        "00:05:17,680 --> 00:05:19,680",
        "похоже. Мы начнем с 5,"
    ],
    "184": [
        "00:05:19,680 --> 00:05:21,680",
        "мы идем до 1,"
    ],
    "185": [
        "00:05:21,680 --> 00:05:23,680",
        "но не включая 1, и мы"
    ],
    "186": [
        "00:05:23,680 --> 00:05:25,680",
        "вводим 1-1 как 3-й"
    ],
    "187": [
        "00:05:25,680 --> 00:05:27,680",
        "аргумент, потому что в этом случае"
    ],
    "188": [
        "00:05:27,680 --> 00:05:29,680",
        "мы ограничиваем. Если вы не вводите"
    ],
    "189": [
        "00:05:29,680 --> 00:05:31,680",
        "1-1, мы увеличиваем i,"
    ],
    "190": [
        "00:05:31,680 --> 00:05:33,680",
        "но когда вы вводите 1-1,"
    ],
    "191": [
        "00:05:33,680 --> 00:05:35,680",
        "это означает, что мы ограничиваем i."
    ],
    "192": [
        "00:05:35,680 --> 00:05:37,680",
        "И мы могли бы вводить 2-2"
    ],
    "193": [
        "00:05:37,680 --> 00:05:39,680",
        "здесь, если мы хотели ограничить"
    ],
    "194": [
        "00:05:39,680 --> 00:05:41,680",
        "2 каждый раз, но просто ограничивая"
    ],
    "195": [
        "00:05:41,680 --> 00:05:43,680",
        "это, идем от 5 до 2,"
    ],
    "196": [
        "00:05:43,680 --> 00:05:45,680",
        "и вы можете увидеть, что мы получили, что мы ожидали."
    ],
    "197": [
        "00:05:45,680 --> 00:05:47,680",
        "Я предполагаю, что это было одной из"
    ],
    "198": [
        "00:05:47,680 --> 00:05:49,680",
        "негативных вещей, когда я первый раз учил пайтон."
    ],
    "199": [
        "00:05:49,680 --> 00:05:51,680",
        "В отличие от большинства языков, где"
    ],
    "200": [
        "00:05:51,680 --> 00:05:53,680",
        "вы можете делать что-то вроде этого,"
    ],
    "201": [
        "00:05:53,680 --> 00:05:55,680",
        "выявить вариант, выявить"
    ],
    "202": [
        "00:05:55,680 --> 00:05:57,680",
        "условие, и выявить ограничение"
    ],
    "203": [
        "00:05:57,680 --> 00:05:59,680",
        "или ограничение, эта синтезация пайтона"
    ],
    "204": [
        "00:05:59,680 --> 00:06:01,680",
        "действительно немного сложнее, но я думаю, что"
    ],
    "205": [
        "00:06:01,680 --> 00:06:03,680",
        "когда вы привыкнете к ней, то это легче выписать,"
    ],
    "206": [
        "00:06:03,680 --> 00:06:05,680",
        "чем эта ботинка, которую я имею здесь."
    ],
    "207": [
        "00:06:05,680 --> 00:06:07,680",
        "Ограничение также немного сложное в"
    ],
    "208": [
        "00:06:07,680 --> 00:06:09,680",
        "пайтоне, это декимальная ограничение"
    ],
    "209": [
        "00:06:09,680 --> 00:06:11,680",
        "по правде, а большинство языков"
    ],
    "210": [
        "00:06:11,680 --> 00:06:13,680",
        "используют ограничение интеграции, так что"
    ],
    "211": [
        "00:06:13,680 --> 00:06:15,680",
        "5 разделить на 2 будет действительно дать"
    ],
    "212": [
        "00:06:15,680 --> 00:06:17,680",
        "2.5, а в большинстве языков"
    ],
    "213": [
        "00:06:17,680 --> 00:06:19,680",
        "это будет обращаться к 0"
    ],
    "214": [
        "00:06:19,680 --> 00:06:21,680",
        "по правде. Если вы хотите ограничение интеграции,"
    ],
    "215": [
        "00:06:21,680 --> 00:06:23,680",
        "вы должны использовать двойное слайс"
    ],
    "216": [
        "00:06:23,680 --> 00:06:25,680",
        "как это, так что придавая это, это будет"
    ],
    "217": [
        "00:06:25,680 --> 00:06:27,680",
        "обращаться, вы можете увидеть, что мы получили 2"
    ],
    "218": [
        "00:06:27,680 --> 00:06:29,680",
        "как результат, но если вы поймали, что я только что"
    ],
    "219": [
        "00:06:29,680 --> 00:06:31,680",
        "сказал, вы должны быть осторожны, потому что большинство языков"
    ],
    "220": [
        "00:06:31,680 --> 00:06:33,680",
        "обращаются к 0"
    ],
    "221": [
        "00:06:33,680 --> 00:06:35,680",
        "по правде, но в пайтоне, если мы делаем"
    ],
    "222": [
        "00:06:35,680 --> 00:06:37,680",
        "ограничение интеграции, мы обращаемся к"
    ],
    "223": [
        "00:06:37,680 --> 00:06:39,680",
        "0, так что вы можете увидеть"
    ],
    "224": [
        "00:06:39,680 --> 00:06:41,680",
        "3 разделить на 2 будет действительно"
    ],
    "225": [
        "00:06:41,680 --> 00:06:43,680",
        "обращаться к 2, где"
    ],
    "226": [
        "00:06:43,680 --> 00:06:45,680",
        "декимальная ограничение будет"
    ],
    "227": [
        "00:06:45,680 --> 00:06:47,680",
        "1.5, в большинстве языков"
    ],
    "228": [
        "00:06:47,680 --> 00:06:49,680",
        "это будет 1. Делать"
    ],
    "229": [
        "00:06:49,680 --> 00:06:51,680",
        "это нужно, чтобы использовать"
    ],
    "230": [
        "00:06:51,680 --> 00:06:53,680",
        "ограничение декимальных, но затем перевести результат"
    ],
    "231": [
        "00:06:53,680 --> 00:06:55,680",
        "к интеграции, потому что когда вы переводите"
    ],
    "232": [
        "00:06:55,680 --> 00:06:57,680",
        "к интеграции, он обращается"
    ],
    "233": [
        "00:06:57,680 --> 00:06:59,680",
        "к 0. Это немного"
    ],
    "234": [
        "00:06:59,680 --> 00:07:03,680",
        "похоже на"
    ],
    "235": [
        "00:00:00,000 --> 00:00:01,160",
        "это просто что-то, что нужно делать."
    ],
    "236": [
        "00:00:01,160 --> 00:00:03,540",
        "Вы можете увидеть, что это будет дать нам негативную"
    ],
    "237": [
        "00:00:03,540 --> 00:00:07,120",
        "1, что может быть вам нужным в некоторых случаях."
    ],
    "238": [
        "00:00:07,120 --> 00:00:09,720",
        "Хотя я бы сказал, что это довольно редко, что нужно знать"
    ],
    "239": [
        "00:00:09,720 --> 00:00:11,560",
        "это, я просто напоминаю, в случае, если вы попадаете"
    ],
    "240": [
        "00:00:11,560 --> 00:00:12,960",
        "в какие-то проблемы."
    ],
    "241": [
        "00:00:12,960 --> 00:00:15,040",
        "Использование модуля оператора довольно похоже на"
    ],
    "242": [
        "00:00:15,040 --> 00:00:17,760",
        "большинство языков, так что 10 разделено 3, получая"
    ],
    "243": [
        "00:00:17,760 --> 00:00:21,440",
        "остальное, мы ожидали 1, и это именно то, что мы получаем."
    ],
    "244": [
        "00:00:21,440 --> 00:00:24,560",
        "Кроме того, проблема, опять же, с негативными валютами."
    ],
    "245": [
        "00:00:24,560 --> 00:00:27,040",
        "Как и разделение негативных валют, когда мы модируем"
    ],
    "246": [
        "00:00:27,040 --> 00:00:30,120",
        "негативные валюты, мы получаем неожиданные результаты, и"
    ],
    "247": [
        "00:00:30,120 --> 00:00:33,480",
        "10 разделено 3, ну, ответ на это, на самом деле, 2."
    ],
    "248": [
        "00:00:33,480 --> 00:00:36,160",
        "И это другое, чем большинство языков, основанных на C,"
    ],
    "249": [
        "00:00:36,160 --> 00:00:39,000",
        "например, Java, C++, я думаю, даже JavaScript."
    ],
    "250": [
        "00:00:39,000 --> 00:00:40,400",
        "Так что если вы хотите быть консистентными с"
    ],
    "251": [
        "00:00:40,400 --> 00:00:44,040",
        "этими другими языками, вы можете импортировать математику и"
    ],
    "252": [
        "00:00:44,040 --> 00:00:45,480",
        "делать f-mods."
    ],
    "253": [
        "00:00:45,480 --> 00:00:48,280",
        "Использование этого дает нам негативную 1, что,"
    ],
    "254": [
        "00:00:48,280 --> 00:00:49,760",
        "возможно, вы и ожидали."
    ],
    "255": [
        "00:00:49,760 --> 00:00:51,920",
        "Несколько полезных математических помощников."
    ],
    "256": [
        "00:00:51,920 --> 00:00:54,800",
        "У нас есть Floor, который выясняет, что мы делаем."
    ],
    "257": [
        "00:00:54,800 --> 00:00:57,080",
        "Мы можем также делать отличие, что является крышкой,"
    ],
    "258": [
        "00:00:57,080 --> 00:00:59,240",
        "так что 3 разделено 2, оборачивая."
    ],
    "259": [
        "00:00:59,240 --> 00:01:01,400",
        "Если вам нужно взять квадратную линзу, то есть помощник,"
    ],
    "260": [
        "00:01:01,400 --> 00:01:03,840",
        "и если вам нужно взять мощь вариабла, вывесив"
    ],
    "261": [
        "00:01:03,840 --> 00:01:06,760",
        "ее к другим, так что 2 в мощи 3, это будет это."
    ],
    "262": [
        "00:01:06,760 --> 00:01:08,920",
        "Если вам нужно максимум, вы можете использовать"
    ],
    "263": [
        "00:01:08,920 --> 00:01:12,280",
        "float-инфинит, и если вам нужно минимум, вы можете"
    ],
    "264": [
        "00:01:12,280 --> 00:01:14,360",
        "использовать float-негативный-инфинит."
    ],
    "265": [
        "00:01:14,360 --> 00:01:16,200",
        "И часть причины, почему они появляются, это потому,"
    ],
    "266": [
        "00:01:16,200 --> 00:01:18,200",
        "что пайтонские числа неисполненные, так что они"
    ],
    "267": [
        "00:01:18,200 --> 00:01:20,040",
        "вообще никогда не пропадают."
    ],
    "268": [
        "00:01:20,040 --> 00:01:24,040",
        "Так что если у нас есть число, как это, 2 в мощи 200,"
    ],
    "269": [
        "00:01:24,040 --> 00:01:26,600",
        "это очень большое число, как вы можете видеть"
    ],
    "270": [
        "00:01:26,600 --> 00:01:28,200",
        "на правом конце, после того, как мы его запишем."
    ],
    "271": [
        "00:01:28,200 --> 00:01:30,200",
        "Это так большое, что мы даже не можем его запишать,"
    ],
    "272": [
        "00:01:30,200 --> 00:01:33,400",
        "это 60 дополнительных дигиталей, но даже это большое число"
    ],
    "273": [
        "00:01:33,400 --> 00:01:36,280",
        "все еще меньше, чем инфинит."
    ],
    "274": [
        "00:01:36,280 --> 00:01:39,440",
        "Читая, если это число меньше, чем инфинит, мы получаем"
    ],
    "275": [
        "00:01:39,440 --> 00:01:40,120",
        "верность."
    ],
    "276": [
        "00:01:40,120 --> 00:01:42,680",
        "Arrays, которые называются листы в пайтоне,"
    ],
    "277": [
        "00:01:42,680 --> 00:01:44,600",
        "это, наверное, самый распространенный данный"
    ],
    "278": [
        "00:01:44,600 --> 00:01:47,200",
        "структурой, которую вы используете в связи с хаш-мапами."
    ],
    "279": [
        "00:01:47,200 --> 00:01:49,640",
        "Так что аррэй может быть заявлен таким образом,"
    ],
    "280": [
        "00:01:49,640 --> 00:01:51,920",
        "но вначале он довольно простой."
    ],
    "281": [
        "00:01:51,920 --> 00:01:54,240",
        "Вы просто вкладываете цифры в несколько бракетов"
    ],
    "282": [
        "00:01:54,240 --> 00:01:56,400",
        "и записывание их просто так просто."
    ],
    "283": [
        "00:01:56,400 --> 00:01:59,760",
        "Arrays в пайтоне это динамические аррэи по правилам."
    ],
    "284": [
        "00:01:59,760 --> 00:02:02,240",
        "Так что, как и в большинстве языков, динамические"
    ],
    "285": [
        "00:02:02,240 --> 00:02:03,920",
        "аррэи могут быть использованы как листы."
    ],
    "286": [
        "00:02:03,920 --> 00:02:06,160",
        "Так что вы можете поддержать аррэю, аккордонно"
    ],
    "287": [
        "00:02:06,160 --> 00:02:09,760",
        "Append, и вы можете также поддержать аррэю, которая"
    ],
    "288": [
        "00:02:09,760 --> 00:02:11,280",
        "поддержит от конца, конечно."
    ],
    "289": [
        "00:02:11,280 --> 00:02:13,720",
        "Так что после того, как мы поддержим 4 и 5, мы можем"
    ],
    "290": [
        "00:02:13,720 --> 00:02:15,920",
        "записать это, и после того, как мы поддержим последнюю"
    ],
    "291": [
        "00:02:15,920 --> 00:02:18,000",
        "цифру, вы можете видеть, что мы поддержим 5."
    ],
    "292": [
        "00:02:18,000 --> 00:02:22,000",
        "Так как это технически аррэй, а не стак, мы можем"
    ],
    "293": [
        "00:02:22,000 --> 00:02:23,000",
        "вкладывать в миддл."
    ],
    "294": [
        "00:02:23,000 --> 00:02:25,920",
        "Так что в Index 1 мы можем вкладывать 7."
    ],
    "295": [
        "00:02:25,920 --> 00:02:28,120",
        "Продавая это, вы можете видеть, что мы вкладывали"
    ],
    "296": [
        "00:02:28,120 --> 00:02:31,120",
        "7 в миддл аррэя."
    ],
    "297": [
        "00:02:31,120 --> 00:02:34,000",
        "Но не так, как выкладывая и выкладывая из аррэя,"
    ],
    "298": [
        "00:02:34,000 --> 00:02:36,560",
        "вкладывание в миддл это большая операция"
    ],
    "299": [
        "00:02:36,560 --> 00:02:38,360",
        "EndTime."
    ],
    "300": [
        "00:02:38,360 --> 00:02:41,440",
        "Но это не большая операция EndTime, чтобы вкладывать"
    ],
    "301": [
        "00:02:41,440 --> 00:02:42,080",
        "аррэю."
    ],
    "302": [
        "00:02:42,080 --> 00:02:44,640",
        "Так что в Index 0 мы можем читать валюту, и мы можем"
    ],
    "303": [
        "00:02:44,640 --> 00:02:47,760",
        "также вкладывать валюту в 0 в этом случае, и мы"
    ],
    "304": [
        "00:02:47,760 --> 00:02:49,960",
        "можем вкладывать валюту в Index 3."
    ],
    "305": [
        "00:02:49,960 --> 00:02:53,240",
        "И эти операции это ConstantTime."
    ],
    "306": [
        "00:02:53,240 --> 00:02:55,760",
        "Чтобы вкладывать в аррэю значительную цифру,"
    ],
    "307": [
        "00:02:55,760 --> 00:02:57,440",
        "скажем, мы хотели вкладывать в аррэю значительную"
    ],
    "308": [
        "00:02:57,440 --> 00:03:00,000",
        "5, и мы хотели, чтобы все валюты были 1, мы могли"
    ],
    "309": [
        "00:03:00,000 --> 00:03:01,320",
        "это сделать довольно легко."
    ],
    "310": [
        "00:03:01,320 --> 00:03:02,600",
        "Это может быть немного странным, чтобы использовать"
    ],
    "311": [
        "00:03:02,600 --> 00:03:05,440",
        "оператор мультипликации, но синтактически это"
    ],
    "312": [
        "00:03:05,440 --> 00:03:06,440",
        "довольно легко."
    ],
    "313": [
        "00:03:06,440 --> 00:03:09,280",
        "Продавая аррэю и длину аррэя, вы можете видеть,"
    ],
    "314": [
        "00:03:09,280 --> 00:03:10,720",
        "что мы получаем то, что мы ожидаем."
    ],
    "315": [
        "00:03:10,720 --> 00:03:13,000",
        "Но будьте осторожны, когда выкладываете в аррэю,"
    ],
    "316": [
        "00:03:13,000 --> 00:03:15,280",
        "особенно когда вы используете негативные валюты,"
    ],
    "317": [
        "00:03:15,280 --> 00:03:17,960",
        "потому что негативная 1 не является выводом из"
    ],
    "318": [
        "00:03:17,960 --> 00:03:18,960",
        "паузы в Python."
    ],
    "319": [
        "00:03:18,960 --> 00:03:22,080",
        "Негативная 1 будет читать последнюю валюту, как вы"
    ],
    "320": [
        "00:03:22,080 --> 00:03:23,480",
        "можете видеть на правом экране."
    ],
    "321": [
        "00:03:23,480 --> 00:03:25,440",
        "И чтобы читать вторую последнюю валюту, вы можете"
    ],
    "322": [
        "00:03:25,440 --> 00:03:26,920",
        "использовать негативную 2."
    ],
    "323": [
        "00:03:26,920 --> 00:03:29,600",
        "В моем мнении, это не очень полезно, но иногда"
    ],
    "324": [
        "00:03:29,600 --> 00:03:31,360",
        "это может быть, когда вы хотите быстро читать"
    ],
    "325": [
        "00:03:31,360 --> 00:03:32,600",
        "последнюю валюту."
    ],
    "326": [
        "00:03:32,600 --> 00:03:35,400",
        "Добавление SubLists, то есть выкладывание в аррэю,"
    ],
    "327": [
        "00:03:35,400 --> 00:03:38,160",
        "это одна из самых полезных функций в Python."
    ],
    "328": [
        "00:03:38,160 --> 00:03:41,200",
        "Так что здесь мы берем валюты в аррэе с Index 1"
    ],
    "329": [
        "00:03:41,200 --> 00:03:44,560",
        "до Index 3, но не включая Index 3, как и"
    ],
    "330": [
        "00:03:44,560 --> 00:03:47,080",
        "с 4-ми лупами, и потом выкладывание этих валют."
    ],
    "331": [
        "00:03:47,080 --> 00:03:49,880",
        "Так что мы ожидали 2 и 3, и вот что мы получили."
    ],
    "332": [
        "00:03:49,880 --> 00:03:52,640",
        "И мы также можем идти с Index 0 до 4, что довольно"
    ],
    "333": [
        "00:03:52,640 --> 00:03:55,360",
        "много всего в аррэе, и это тоже валидно."
    ],
    "334": [
        "00:03:55,360 --> 00:03:58,680",
        "Unpacking тоже очень полезная функция."
    ],
    "335": [
        "00:03:58,680 --> 00:04:00,960",
        "В основном, мы можем взять все индивидуальные элементы"
    ],
    "336": [
        "00:04:00,960 --> 00:04:04,160",
        "аррэя и присоединять их к вариаблям, в этом случае"
    ],
    "337": [
        "00:04:04,160 --> 00:04:05,160",
        "ABC."
    ],
    "338": [
        "00:04:05,160 --> 00:04:06,640",
        "Это может быть очень полезно, когда вы хотите"
    ],
    "339": [
        "00:04:06,640 --> 00:04:09,160",
        "пройти по списку пар, например."
    ],
    "340": [
        "00:04:09,160 --> 00:04:11,720",
        "Будьте осторожны, потому что вы должны убедиться,"
    ],
    "341": [
        "00:04:11,720 --> 00:04:15,280",
        "что количество вариаблов на левой стороне соответствует"
    ],
    "342": [
        "00:04:15,280 --> 00:04:17,800",
        "количеству, который вы ожидаете от аррэя."
    ],
    "343": [
        "00:04:17,800 --> 00:04:20,480",
        "Мы можем пройти по аррэю в много разных"
    ],
    "344": [
        "00:04:20,480 --> 00:04:21,480",
        "способах."
    ],
    "345": [
        "00:04:21,480 --> 00:04:22,880",
        "Используя простую 4-ми лупную синтезацию, которую"
    ],
    "346": [
        "00:04:22,880 --> 00:04:25,080",
        "мы говорили об этом ранее, мы можем взять длину"
    ],
    "347": [
        "00:04:25,080 --> 00:04:28,320",
        "аррэя и потом итерировать ее так много раз, используя"
    ],
    "348": [
        "00:04:28,320 --> 00:04:31,800",
        "Index i, и потом выкладывая индивидуальный валют."
    ],
    "349": [
        "00:04:31,800 --> 00:04:34,800",
        "Лучше выполнить тот же самое, без"
    ],
    "350": [
        "00:04:34,800 --> 00:04:37,600",
        "использования Index, так что мы можем пройти по всему"
    ],
    "351": [
        "00:04:37,600 --> 00:04:41,840",
        "вариаблю в NUM и потом просто изображать тот индивидуальный"
    ],
    "352": [
        "00:04:41,840 --> 00:04:42,840",
        "валют."
    ],
    "353": [
        "00:04:42,840 --> 00:04:44,160",
        "Если по какой-то причине вам понадобился"
    ],
    "354": [
        "00:04:44,160 --> 00:04:47,560",
        "Index и вариабль, вы могли использовать первый 4-ми луп,"
    ],
    "355": [
        "00:04:47,560 --> 00:04:49,560",
        "который я показал здесь, но другой способ"
    ],
    "356": [
        "00:04:49,560 --> 00:04:51,960",
        "использовать это, это использовать функцию Enumerate"
    ],
    "357": [
        "00:04:51,960 --> 00:04:52,960",
        "в Python."
    ],
    "358": [
        "00:04:52,960 --> 00:04:55,480",
        "И Enumerate будет дать вам Index, который будет"
    ],
    "359": [
        "00:04:55,480 --> 00:04:57,680",
        "первым вариаблем, который будет распакованным, и"
    ],
    "360": [
        "00:04:57,680 --> 00:04:59,480",
        "второй вариабль, который будет распакованным, будет"
    ],
    "361": [
        "00:04:59,480 --> 00:05:02,080",
        "число, и потом мы можем изображать оба из них, если"
    ],
    "362": [
        "00:05:02,080 --> 00:05:04,080",
        "по какой-то причине нам понадобилось оба из них."
    ],
    "363": [
        "00:05:04,080 --> 00:05:06,200",
        "И все три этих вариабля выполняются, как вы"
    ],
    "364": [
        "00:05:06,200 --> 00:05:07,200",
        "ожидали."
    ],
    "365": [
        "00:05:07,200 --> 00:05:10,000",
        "Если мы хотим пройти по многим вариаблям"
    ],
    "366": [
        "00:05:10,000 --> 00:05:13,840",
        "одновременно, мы можем сделать это с распаковкой и"
    ],
    "367": [
        "00:05:13,840 --> 00:05:16,120",
        "помощью, которая называется Zip."
    ],
    "368": [
        "00:05:16,120 --> 00:05:19,120",
        "Zip будет, в основном, взять оба этих вариабля и"
    ],
    "369": [
        "00:05:19,120 --> 00:05:23,080",
        "смешать их в вариабль пар, и потом мы можем распаковать"
    ],
    "370": [
        "00:05:23,080 --> 00:05:27,400",
        "эти пары валют, которые вариабли из NUM1 и NUM2."
    ],
    "371": [
        "00:05:27,400 --> 00:05:29,680",
        "Мы получаем, что мы и ждем."
    ],
    "372": [
        "00:05:29,680 --> 00:05:31,520",
        "Отвергнуть вариабль так просто, как называть"
    ],
    "373": [
        "00:05:31,520 --> 00:05:34,160",
        "ответственную методику на этот вариабль."
    ],
    "374": [
        "00:05:34,160 --> 00:05:37,240",
        "Итак, 123 становится 321."
    ],
    "375": [
        "00:05:37,240 --> 00:05:39,040",
        "Сортировать вариабль так просто."
    ],
    "376": [
        "00:05:39,040 --> 00:05:41,320",
        "Возьмем этот вариабль, мы можем назвать его Sort, и"
    ],
    "377": [
        "00:05:41,320 --> 00:05:43,600",
        "это будет сортировать в нисходящем порядке по"
    ],
    "378": [
        "00:05:43,600 --> 00:05:44,600",
        "правилам."
    ],
    "379": [
        "00:05:44,600 --> 00:05:45,960",
        "Если мы хотим сортировать его в обратном порядке,"
    ],
    "380": [
        "00:05:45,960 --> 00:05:49,320",
        "мы просто вводим параметр reverse=\"true\", и"
    ],
    "381": [
        "00:05:49,320 --> 00:05:51,600",
        "потом вариабль будет сортирован в нисходящем"
    ],
    "382": [
        "00:05:51,600 --> 00:05:52,600",
        "порядке."
    ],
    "383": [
        "00:05:52,600 --> 00:05:54,200",
        "Мы также можем сортировать список стрингов."
    ],
    "384": [
        "00:05:54,200 --> 00:05:57,320",
        "По правилам они будут сортированы в алфавитном"
    ],
    "385": [
        "00:05:57,320 --> 00:05:59,360",
        "порядке, как вы видите на правом."
    ],
    "386": [
        "00:05:59,360 --> 00:06:01,960",
        "Но если мы хотим выполнять кустомный сорт, например,"
    ],
    "387": [
        "00:06:01,960 --> 00:06:04,840",
        "если мы хотим сортить по длине каждого стринга,"
    ],
    "388": [
        "00:06:04,840 --> 00:06:07,880",
        "то мы можем сделать это, вводя в него ламбда."
    ],
    "389": [
        "00:06:07,880 --> 00:06:10,920",
        "Так что в этом случае ключ равен ламбде, который"
    ],
    "390": [
        "00:06:10,920 --> 00:06:13,920",
        "в основном функции без имени, и мы будем взять"
    ],
    "391": [
        "00:06:13,920 --> 00:06:17,000",
        "каждый синий вариант из аррея, называть его"
    ],
    "392": [
        "00:06:17,000 --> 00:06:20,560",
        "x, и потом вернуть из этого длину x, и это"
    ],
    "393": [
        "00:06:20,560 --> 00:06:23,280",
        "ключ, который будет использоваться для сортировки"
    ],
    "394": [
        "00:06:23,280 --> 00:06:24,280",
        "стринга."
    ],
    "395": [
        "00:06:24,280 --> 00:06:26,920",
        "Так что каждый стринг будет сформирован по длине,"
    ],
    "396": [
        "00:06:26,920 --> 00:06:30,000",
        "и потом мы будем сортировать эти стринги по длине."
    ],
    "397": [
        "00:06:30,000 --> 00:06:33,200",
        "По правилам, это будет в восстановленном порядке,"
    ],
    "398": [
        "00:06:33,200 --> 00:06:35,240",
        "как мы можем подтвердить на правом."
    ],
    "399": [
        "00:06:35,240 --> 00:06:38,080",
        "Еще один способ, как сортировать списки, это"
    ],
    "400": [
        "00:06:38,080 --> 00:06:40,240",
        "использование компреенсии списка."
    ],
    "401": [
        "00:06:40,240 --> 00:06:41,960",
        "Так что если мы хотели пройти через каждый"
    ],
    "402": [
        "00:06:41,960 --> 00:06:46,800",
        "вариант в длине 5, и называть этот вариант i, и мы хотим"
    ],
    "403": [
        "00:06:46,800 --> 00:06:50,080",
        "добавить этот вариант в этот арре, это короткое"
    ],
    "404": [
        "00:06:50,080 --> 00:06:51,080",
        "дело."
    ],
    "405": [
        "00:06:51,080 --> 00:06:53,440",
        "Так что мы итерируем для i в длине 5, и потом i"
    ],
    "406": [
        "00:06:53,440 --> 00:06:56,560",
        "идет сюда, так что мы берем этот i-вариант и добавляем"
    ],
    "407": [
        "00:06:56,560 --> 00:06:58,320",
        "его в арре."
    ],
    "408": [
        "00:06:58,320 --> 00:07:00,000",
        "И при печатании вы можете увидеть, что мы действительно"
    ],
    "409": [
        "00:00:00,000 --> 00:00:01,000",
        "0 through 4."
    ],
    "410": [
        "00:00:01,000 --> 00:00:06,560",
        "Now, maybe we want to go through every value in that range, but we want to take i and add"
    ],
    "411": [
        "00:00:06,560 --> 00:00:09,000",
        "i plus i to the result."
    ],
    "412": [
        "00:00:09,000 --> 00:00:12,840",
        "So for every index, we want two times that index added to the result."
    ],
    "413": [
        "00:00:12,840 --> 00:00:15,600",
        "You can see we can also do that pretty easily."
    ],
    "414": [
        "00:00:15,600 --> 00:00:20,520",
        "If you want to do something similar for a 2D list, it's also pretty easy, but maybe a bit"
    ],
    "415": [
        "00:00:20,520 --> 00:00:21,780",
        "different than you would expect."
    ],
    "416": [
        "00:00:21,780 --> 00:00:25,320",
        "The easiest way to do it is the shorthand that we talked about earlier, where we take"
    ],
    "417": [
        "00:00:25,320 --> 00:00:28,520",
        "an array with 0 and then multiply it by 4."
    ],
    "418": [
        "00:00:28,520 --> 00:00:32,160",
        "This will give us an array of size 4 with all 0s."
    ],
    "419": [
        "00:00:32,160 --> 00:00:37,680",
        "And we want this array to be added to the outer array four times."
    ],
    "420": [
        "00:00:37,680 --> 00:00:40,640",
        "So we have an inner loop for i in range 4."
    ],
    "421": [
        "00:00:40,640 --> 00:00:47,320",
        "We're not even using the variable i here, but this will build a 4 by 4 grid of all 0s."
    ],
    "422": [
        "00:00:47,320 --> 00:00:49,720",
        "You might be thinking, isn't there an easier way to do that?"
    ],
    "423": [
        "00:00:49,720 --> 00:00:50,720",
        "Well, actually not."
    ],
    "424": [
        "00:00:50,720 --> 00:00:55,840",
        "You might be thinking, can we just do this, create an array of size 4, and then multiply"
    ],
    "425": [
        "00:00:55,840 --> 00:00:57,000",
        "that by 4?"
    ],
    "426": [
        "00:00:57,000 --> 00:01:02,920",
        "Well, technically this will work, but each of the four rows of this array are going to"
    ],
    "427": [
        "00:01:02,920 --> 00:01:03,920",
        "be the same."
    ],
    "428": [
        "00:01:03,920 --> 00:01:08,320",
        "So if we modify one of the rows, we're going to be modifying all of the other rows."
    ],
    "429": [
        "00:01:08,320 --> 00:01:11,680",
        "We're not actually creating four unique rows in this case."
    ],
    "430": [
        "00:01:11,680 --> 00:01:14,020",
        "It's a common thing that can throw people off."
    ],
    "431": [
        "00:01:14,020 --> 00:01:17,200",
        "If you have more questions about this, feel free to ask in the comments."
    ],
    "432": [
        "00:01:17,200 --> 00:01:20,440",
        "It's something that tripped me up a lot when I first started."
    ],
    "433": [
        "00:01:20,440 --> 00:01:24,440",
        "Strings are pretty similar to arrays, so we can declare one with double quotes."
    ],
    "434": [
        "00:01:24,440 --> 00:01:26,680",
        "You can also use single quotes if you want."
    ],
    "435": [
        "00:01:26,680 --> 00:01:29,840",
        "And we can slice them the same way we do with arrays."
    ],
    "436": [
        "00:01:29,840 --> 00:01:31,560",
        "And printing it works the same."
    ],
    "437": [
        "00:01:31,560 --> 00:01:34,260",
        "But a key point is that they are immutable."
    ],
    "438": [
        "00:01:34,260 --> 00:01:36,480",
        "That means we can't modify the string."
    ],
    "439": [
        "00:01:36,480 --> 00:01:40,360",
        "That means we can't reassign the character at index 0."
    ],
    "440": [
        "00:01:40,360 --> 00:01:45,600",
        "We can, however, update the string, but updating it will actually create a new string."
    ],
    "441": [
        "00:01:45,600 --> 00:01:50,240",
        "So adding def to the end of the string will create a new string."
    ],
    "442": [
        "00:01:50,240 --> 00:01:56,160",
        "So basically, any time you modify a string, it's considered an end time operation."
    ],
    "443": [
        "00:01:56,160 --> 00:02:00,840",
        "Strings can be converted into integers, and then those integers can be added."
    ],
    "444": [
        "00:02:00,840 --> 00:02:06,220",
        "Integers can also be converted into strings, and then those strings can be added together."
    ],
    "445": [
        "00:02:06,220 --> 00:02:10,280",
        "So when you add two integers together, we get an integer as a result."
    ],
    "446": [
        "00:02:10,280 --> 00:02:13,420",
        "Adding two strings together appends those strings together."
    ],
    "447": [
        "00:02:13,420 --> 00:02:15,500",
        "So we get 1, 2, 3, 1, 2, 3."
    ],
    "448": [
        "00:02:15,500 --> 00:02:20,680",
        "If for some reason you need the ASCII value of a character, you can do that with the ORD"
    ],
    "449": [
        "00:02:20,680 --> 00:02:21,680",
        "function."
    ],
    "450": [
        "00:02:21,680 --> 00:02:26,320",
        "So if we do this, you can see we get 97 is the ASCII value of lowercase a, 98 is the"
    ],
    "451": [
        "00:02:26,320 --> 00:02:28,040",
        "ASCII value of lowercase b."
    ],
    "452": [
        "00:02:28,040 --> 00:02:32,600",
        "You can also join a list of strings together with a delimiter."
    ],
    "453": [
        "00:02:32,600 --> 00:02:38,080",
        "In this example, we have three strings, and we're joining them with the empty string delimiter"
    ],
    "454": [
        "00:02:38,080 --> 00:02:39,080",
        "here."
    ],
    "455": [
        "00:02:39,080 --> 00:02:41,600",
        "So we're basically just appending these three strings together."
    ],
    "456": [
        "00:02:41,600 --> 00:02:45,060",
        "We could also have had a delimiter, maybe a space in between all of them."
    ],
    "457": [
        "00:02:45,060 --> 00:02:48,240",
        "And printing the result, we get all three strings appended."
    ],
    "458": [
        "00:02:48,240 --> 00:02:50,840",
        "Queues in Python are double-ended queues by default."
    ],
    "459": [
        "00:02:50,840 --> 00:02:52,160",
        "You can import them."
    ],
    "460": [
        "00:02:52,160 --> 00:02:55,800",
        "Adding values to the right side is as easy as appending to the queue."
    ],
    "461": [
        "00:02:55,800 --> 00:02:58,800",
        "So at this point, our queue isn't much different from a stack."
    ],
    "462": [
        "00:02:58,800 --> 00:03:02,700",
        "But the benefit is that we can actually pop from the left of the queue, and we can do"
    ],
    "463": [
        "00:03:02,700 --> 00:03:08,360",
        "this operation in constant time, unlike with a stack, as you can confirm on the right."
    ],
    "464": [
        "00:03:08,360 --> 00:03:11,920",
        "Since it's double-ended, we can also add values to the left of the queue."
    ],
    "465": [
        "00:03:11,920 --> 00:03:14,960",
        "So the one that we popped, we can add back to the left side."
    ],
    "466": [
        "00:03:14,960 --> 00:03:19,040",
        "And also we can choose to pop from the right side if we want to."
    ],
    "467": [
        "00:03:19,040 --> 00:03:24,320",
        "So running this, we can confirm that the one is added back, and then we pop the two after"
    ],
    "468": [
        "00:03:24,320 --> 00:03:25,320",
        "that."
    ],
    "469": [
        "00:03:25,320 --> 00:03:29,080",
        "Hash sets are really useful because we can search them in constant time, and we can insert"
    ],
    "470": [
        "00:03:29,080 --> 00:03:31,400",
        "values also in constant time."
    ],
    "471": [
        "00:03:31,400 --> 00:03:34,820",
        "Of course, there won't be any duplicates in our set."
    ],
    "472": [
        "00:03:34,820 --> 00:03:38,760",
        "Of course, unlike a list, there can't be any duplicates in a hash set."
    ],
    "473": [
        "00:03:38,760 --> 00:03:43,060",
        "But we can just as easily get the length of the hash set to know how many elements have"
    ],
    "474": [
        "00:03:43,060 --> 00:03:44,060",
        "been inserted."
    ],
    "475": [
        "00:03:44,060 --> 00:03:45,840",
        "We can also search the hash set."
    ],
    "476": [
        "00:03:45,840 --> 00:03:48,180",
        "Without a function, we can use the in operator."
    ],
    "477": [
        "00:03:48,180 --> 00:03:51,920",
        "So if we want to know if one exists in the hash set, same thing with two, same thing"
    ],
    "478": [
        "00:03:51,920 --> 00:03:56,220",
        "with three, which we know does not exist in the hash set, as we can confirm."
    ],
    "479": [
        "00:03:56,220 --> 00:04:01,760",
        "We can remove values also in constant time and confirm that the value has indeed been"
    ],
    "480": [
        "00:04:01,760 --> 00:04:02,760",
        "removed."
    ],
    "481": [
        "00:04:02,760 --> 00:04:06,820",
        "To initialize a hash set with a bunch of values, we can actually pass in a list."
    ],
    "482": [
        "00:04:06,820 --> 00:04:11,960",
        "But just like with lists, we can also do set comprehension and manually initialize it with"
    ],
    "483": [
        "00:04:11,960 --> 00:04:14,240",
        "a loop inside of the hash set."
    ],
    "484": [
        "00:04:14,240 --> 00:04:19,000",
        "So here we're going through every value in the range of i and taking that value i, adding"
    ],
    "485": [
        "00:04:19,000 --> 00:04:22,960",
        "it to the hash set, and initializing it this way is identical."
    ],
    "486": [
        "00:04:22,960 --> 00:04:26,320",
        "Hash maps are probably the single most common data structure you're going to be used, and"
    ],
    "487": [
        "00:04:26,320 --> 00:04:28,720",
        "this is what we were saving those curly braces for."
    ],
    "488": [
        "00:04:28,720 --> 00:04:33,400",
        "To insert, we simply take some key value, in this case a string, and assign it to another"
    ],
    "489": [
        "00:04:33,400 --> 00:04:35,660",
        "value, in this case a number, 88."
    ],
    "490": [
        "00:04:35,660 --> 00:04:37,200",
        "And we can add a bunch more."
    ],
    "491": [
        "00:04:37,200 --> 00:04:41,680",
        "Just like with hash sets, we can't have duplicate keys inside of the hash map."
    ],
    "492": [
        "00:04:41,680 --> 00:04:43,320",
        "Printing it is just as simple."
    ],
    "493": [
        "00:04:43,320 --> 00:04:47,480",
        "Taking the length will give us the number of keys that exist in our hash map."
    ],
    "494": [
        "00:04:47,480 --> 00:04:52,000",
        "We can modify the value that's mapped to a key, so we can change Alice from being 88"
    ],
    "495": [
        "00:04:52,000 --> 00:04:53,000",
        "to 80."
    ],
    "496": [
        "00:04:53,000 --> 00:04:58,280",
        "We can also search if a key exists in a hash map in constant time, and we can also remove"
    ],
    "497": [
        "00:04:58,280 --> 00:05:02,920",
        "that key, which will also remove the value, as we can confirm on the right."
    ],
    "498": [
        "00:05:02,920 --> 00:05:07,160",
        "To initialize a hash map, we can add pairs inside of the curly braces, where each pair"
    ],
    "499": [
        "00:05:07,160 --> 00:05:11,920",
        "is separated by a comma, and the key goes on the left side of the colon, and the value"
    ],
    "500": [
        "00:05:11,920 --> 00:05:13,480",
        "goes on the right side."
    ],
    "501": [
        "00:05:13,480 --> 00:05:17,080",
        "This is the same as manually inserting values into the hash map."
    ],
    "502": [
        "00:05:17,080 --> 00:05:20,640",
        "But if you want to get even more fancy, you can use dict comprehension."
    ],
    "503": [
        "00:05:20,640 --> 00:05:25,160",
        "Hash maps are basically called dictionaries in Python, and the syntax is pretty similar,"
    ],
    "504": [
        "00:05:25,160 --> 00:05:29,280",
        "but in this case, if we're looping i in the range of 3, we're going to have two values,"
    ],
    "505": [
        "00:05:29,280 --> 00:05:33,280",
        "i in this case is the key, then a colon, and then the value goes after that, in this case"
    ],
    "506": [
        "00:05:33,280 --> 00:05:36,040",
        "we're mapping i to 2 times i."
    ],
    "507": [
        "00:05:36,040 --> 00:05:40,040",
        "This is pretty powerful, and I find that I use it most frequently when I'm doing graph"
    ],
    "508": [
        "00:05:40,040 --> 00:05:43,120",
        "problems and trying to build an adjacency list."
    ],
    "509": [
        "00:05:43,120 --> 00:05:46,680",
        "Looping through a map is pretty interesting, because there's many ways to do it."
    ],
    "510": [
        "00:05:46,680 --> 00:05:51,280",
        "By default, we iterate through every single key, and then we can print that key, and also"
    ],
    "511": [
        "00:05:51,280 --> 00:05:53,840",
        "print the value that that key maps to."
    ],
    "512": [
        "00:05:53,840 --> 00:05:58,880",
        "But also, we can directly iterate through the list of values of that hash map, if we"
    ],
    "513": [
        "00:05:58,880 --> 00:06:00,680",
        "don't even need the key."
    ],
    "514": [
        "00:06:00,680 --> 00:06:05,520",
        "Lastly, using unpacking, we can actually go through the items of that map, which will"
    ],
    "515": [
        "00:06:05,520 --> 00:06:07,320",
        "give us the key and the value."
    ],
    "516": [
        "00:06:07,320 --> 00:06:11,100",
        "This is pretty similar to the first loop that we have, I guess it's a bit more concise to"
    ],
    "517": [
        "00:06:11,100 --> 00:06:12,560",
        "write it this way."
    ],
    "518": [
        "00:06:12,560 --> 00:06:17,840",
        "Python also has tuples, which are pretty similar to arrays, except to initialize them we use"
    ],
    "519": [
        "00:06:17,840 --> 00:06:21,620",
        "parentheses rather than brackets, and they are immutable."
    ],
    "520": [
        "00:06:21,620 --> 00:06:27,000",
        "So while we can index them, we can't modify them, so this won't work."
    ],
    "521": [
        "00:06:27,000 --> 00:06:31,520",
        "You'll mainly be using tuples as keys for a hash map or a hash set, so in this case"
    ],
    "522": [
        "00:06:31,520 --> 00:06:35,160",
        "we're mapping a pair of values 1, 2 to 3."
    ],
    "523": [
        "00:06:35,160 --> 00:06:38,200",
        "So this tuple is basically our hashable key."
    ],
    "524": [
        "00:06:38,200 --> 00:06:40,960",
        "We can do the same thing for hash sets, of course."
    ],
    "525": [
        "00:06:40,960 --> 00:06:43,560",
        "And then we can use that tuple to search the hash set."
    ],
    "526": [
        "00:06:43,560 --> 00:06:48,520",
        "The reason we do this is because lists are not hashable and can't be keys for hash sets"
    ],
    "527": [
        "00:06:48,520 --> 00:06:51,680",
        "or hash maps, so this here will not work."
    ],
    "528": [
        "00:06:51,680 --> 00:06:56,200",
        "Heaps are another really common data structure to find the min and max of a set of values"
    ],
    "529": [
        "00:06:56,200 --> 00:06:57,200",
        "frequently."
    ],
    "530": [
        "00:06:57,200 --> 00:06:59,680",
        "Under the hood in Python, they're implemented with arrays, of course."
    ],
    "531": [
        "00:06:59,680 --> 00:07:09,960",
        "So actually"
    ]
}